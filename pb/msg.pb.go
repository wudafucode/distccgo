// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	msg.proto

It has these top-level messages:
	Heartbeat
	Cpuarg
	HeartbeatResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Heartbeat struct {
	Worknode string  `protobuf:"bytes,1,opt,name=worknode" json:"worknode,omitempty"`
	Arg      *Cpuarg `protobuf:"bytes,2,opt,name=arg" json:"arg,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Heartbeat) GetWorknode() string {
	if m != nil {
		return m.Worknode
	}
	return ""
}

func (m *Heartbeat) GetArg() *Cpuarg {
	if m != nil {
		return m.Arg
	}
	return nil
}

type Cpuarg struct {
	Ldavg1  float32 `protobuf:"fixed32,1,opt,name=Ldavg1" json:"Ldavg1,omitempty"`
	Ldavg5  float32 `protobuf:"fixed32,2,opt,name=Ldavg5" json:"Ldavg5,omitempty"`
	Ldavg10 float32 `protobuf:"fixed32,3,opt,name=Ldavg10" json:"Ldavg10,omitempty"`
	CPUNum  uint32  `protobuf:"varint,4,opt,name=CPUNum" json:"CPUNum,omitempty"`
}

func (m *Cpuarg) Reset()                    { *m = Cpuarg{} }
func (m *Cpuarg) String() string            { return proto.CompactTextString(m) }
func (*Cpuarg) ProtoMessage()               {}
func (*Cpuarg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cpuarg) GetLdavg1() float32 {
	if m != nil {
		return m.Ldavg1
	}
	return 0
}

func (m *Cpuarg) GetLdavg5() float32 {
	if m != nil {
		return m.Ldavg5
	}
	return 0
}

func (m *Cpuarg) GetLdavg10() float32 {
	if m != nil {
		return m.Ldavg10
	}
	return 0
}

func (m *Cpuarg) GetCPUNum() uint32 {
	if m != nil {
		return m.CPUNum
	}
	return 0
}

type HeartbeatResponse struct {
	Leader     string   `protobuf:"bytes,1,opt,name=leader" json:"leader,omitempty"`
	Servernode []string `protobuf:"bytes,2,rep,name=servernode" json:"servernode,omitempty"`
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HeartbeatResponse) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *HeartbeatResponse) GetServernode() []string {
	if m != nil {
		return m.Servernode
	}
	return nil
}

func init() {
	proto.RegisterType((*Heartbeat)(nil), "pb.Heartbeat")
	proto.RegisterType((*Cpuarg)(nil), "pb.Cpuarg")
	proto.RegisterType((*HeartbeatResponse)(nil), "pb.HeartbeatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Msg service

type MsgClient interface {
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (Msg_SendHeartbeatClient, error)
}

type msgClient struct {
	cc *grpc.ClientConn
}

func NewMsgClient(cc *grpc.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (Msg_SendHeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Msg_serviceDesc.Streams[0], c.cc, "/pb.Msg/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &msgSendHeartbeatClient{stream}
	return x, nil
}

type Msg_SendHeartbeatClient interface {
	Send(*Heartbeat) error
	Recv() (*HeartbeatResponse, error)
	grpc.ClientStream
}

type msgSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *msgSendHeartbeatClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *msgSendHeartbeatClient) Recv() (*HeartbeatResponse, error) {
	m := new(HeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Msg service

type MsgServer interface {
	SendHeartbeat(Msg_SendHeartbeatServer) error
}

func RegisterMsgServer(s *grpc.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MsgServer).SendHeartbeat(&msgSendHeartbeatServer{stream})
}

type Msg_SendHeartbeatServer interface {
	Send(*HeartbeatResponse) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type msgSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *msgSendHeartbeatServer) Send(m *HeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *msgSendHeartbeatServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _Msg_SendHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "msg.proto",
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x87, 0x6d, 0x2b, 0xd5, 0x8e, 0xf4, 0x60, 0x40, 0x09, 0x8b, 0xc8, 0xd2, 0xd3, 0x9e, 0xca,
	0xba, 0xb2, 0x27, 0x6f, 0x2e, 0x82, 0xe0, 0x1f, 0x24, 0xe2, 0x03, 0xa4, 0x64, 0x08, 0xa8, 0xdb,
	0x84, 0xa4, 0xbb, 0xbe, 0xbe, 0x49, 0x9a, 0x46, 0xf7, 0xf8, 0x7d, 0xbf, 0xc9, 0x64, 0x66, 0xa0,
	0xda, 0x5a, 0xd9, 0x6a, 0xa3, 0x06, 0x45, 0x72, 0xdd, 0x35, 0x0f, 0x50, 0x3d, 0x22, 0x37, 0x43,
	0x87, 0x7c, 0x20, 0x33, 0x38, 0xfd, 0x51, 0xe6, 0xab, 0x57, 0x02, 0x69, 0x36, 0xcf, 0x16, 0x15,
	0x4b, 0x4c, 0xae, 0xa0, 0xe0, 0x46, 0xd2, 0xdc, 0xe9, 0xb3, 0x15, 0xb4, 0xba, 0x6b, 0x37, 0x7a,
	0xe7, 0x0c, 0xf3, 0xba, 0xf9, 0x84, 0x72, 0x44, 0x72, 0x09, 0xe5, 0xb3, 0xe0, 0x7b, 0x79, 0x13,
	0x3a, 0xe4, 0x2c, 0x52, 0xf2, 0xeb, 0xd0, 0x62, 0xf2, 0x6b, 0x42, 0xe1, 0x64, 0xac, 0x58, 0xd2,
	0x22, 0x04, 0x13, 0xfa, 0x17, 0x9b, 0xb7, 0x8f, 0xd7, 0xdd, 0x96, 0x1e, 0xbb, 0xa0, 0x66, 0x91,
	0x9a, 0x27, 0x38, 0x4f, 0x23, 0x33, 0xb4, 0x5a, 0xf5, 0x16, 0x7d, 0xf1, 0x37, 0x72, 0x81, 0x26,
	0x0e, 0x1e, 0x89, 0x5c, 0x03, 0x58, 0x34, 0x7b, 0x34, 0x61, 0xa9, 0x7c, 0x5e, 0xb8, 0xec, 0x9f,
	0x59, 0xdd, 0x43, 0xf1, 0x62, 0x25, 0xb9, 0x83, 0xfa, 0x1d, 0x7b, 0xf1, 0x77, 0x8a, 0xda, 0x6f,
	0x98, 0x70, 0x76, 0x71, 0x80, 0xd3, 0xaf, 0xcd, 0xd1, 0x22, 0x5b, 0x66, 0x5d, 0x19, 0xce, 0x79,
	0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xb4, 0x38, 0x67, 0x5b, 0x01, 0x00, 0x00,
}
